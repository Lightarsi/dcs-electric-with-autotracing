/* -*- tab-width: 4 -*-
 *
 * Electric(tm) VLSI Design System
 *
 * File: AutotracingTab.java
 *
 * Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved.
 *
 * Electric(tm) is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Electric(tm) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.sun.electric.tool.user.dialogs.options;

import com.sun.electric.tool.autotracing.Constants;
import com.sun.electric.tool.user.dialogs.PreferencesFrame;

import javax.swing.JPanel;

/**
 * Class to handle the "Autotracing" tab of the Preferences dialog.
 */
public class AutotracingTab extends PreferencePanel {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox keysIndicated;
    private javax.swing.JCheckBox writeLog;
    private javax.swing.JPanel autotracing;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form AutotracingTab
     *
     * @param parent
     * @param modal
     */
    public AutotracingTab(PreferencesFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * return the panel to use for the user preferences.
     *
     * @return
     */
    @Override
    public JPanel getUserPreferencesPanel() {
        return autotracing;
    }

    /**
     * return the name of this preferences tab.
     *
     * @return
     */
    @Override
    public String getName() {
        return "Autotracing";
    }

    /**
     * Method called at the start of the dialog. Caches current values and
     * displays them in the Autotracing tab.
     */
    @Override
    public void init() {
        keysIndicated.setSelected(Constants.isKeysIndicated());
        writeLog.setSelected(Constants.isLogging());
    }

    /**
     * Method called when the "OK" panel is hit. Updates any changed fields in
     * the autotracing tab.
     */
    @Override
    public void term() {
        boolean currentIndicateChoice = keysIndicated.isSelected();
        if (currentIndicateChoice != Constants.isKeysIndicated()) {
            Constants.setKeysIndicated(currentIndicateChoice);
        }
        boolean currentWritewriteLogChoice = writeLog.isSelected();
        if (currentWritewriteLogChoice != Constants.isLogging()) {
            Constants.setLogging(currentWritewriteLogChoice);
        }
    }

    /**
     * Method called when the factory reset is requested.
     */
    @Override
    public void reset() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        autotracing = new javax.swing.JPanel();
        keysIndicated = new javax.swing.JCheckBox();
        writeLog = new javax.swing.JCheckBox();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("Tool Options");
        setName("");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        autotracing.setLayout(new java.awt.GridBagLayout());

        keysIndicated.setText("Indicate keys");
        writeLog.setText("writeLog");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

        autotracing.add(keysIndicated, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        autotracing.add(writeLog, gridBagConstraints);

        getContentPane().add(autotracing, new java.awt.GridBagConstraints());

        pack();
    }//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
    {
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

}
